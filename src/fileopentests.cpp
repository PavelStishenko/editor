#include "filecategorize.h"
#include <QFile>
#include <QDir>
#include <QTemporaryDir>

#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>

#include "../third-party/catch.hpp"

TEST_CASE("FileOpen") {

    auto slash = GENERATE("", "/");

    //TEMP DIR
    QTemporaryDir dir;
    QDir tmpd(dir.path());

    //RW
    QString dirRW = dir.path() + "/rw";
    tmpd.mkdir("rw");

    QFile tmpf(dirRW + "/filerw");
    QString fileRW = tmpf.fileName();
    tmpf.open(QIODevice::WriteOnly);
    tmpf.close();

    QString fileRWNE = dirRW + "/filenotexist";

    QString dirRWNE = dirRW + "/dirnotexist";

    //RO
    tmpd.mkdir("ro");
    QString dirRO = dir.path() + "/ro";

    QString fileRO = dirRO + "/filero";
    tmpf.setFileName(fileRO);
    tmpf.open(QIODevice::WriteOnly);
    tmpf.close();

    QString fileRONE = dirRO + "/filenotexist";

    QString dirRONE = dirRO + "/dirnotexist";

    //LINK
    QString fileLinkRW = dir.path() + "linkRW";
    QFile::link(fileRW, fileLinkRW);

    QString fileLinkRO = dir.path() + "linkRO";
    QFile::link(fileRO, fileLinkRO);

    QString fileLinkRWNE = dir.path() + "linkRWNE";
    QFile::link(fileRWNE, fileLinkRWNE);

    QString fileLinkRONE = dir.path() + "linkRONE";
    QFile::link(fileRONE, fileLinkRONE);

    QString dirLinkRW = dir.path() + "dirlinkRW";
    QFile::link(dirRW, dirLinkRW);

    QString dirLinkRO = dir.path() + "dirlinkRO";
    QFile::link(dirRO, dirLinkRO);

    QString dirLinkRWNE = dir.path() + "dirlinkRWNE";
    QFile::link(dirRWNE, dirLinkRWNE);

    QString dirLinkRONE = dir.path() + "dirlinkRONE";
    QFile::link(dirRONE, dirLinkRONE);

    QString self =  dir.path() + "self";
    QFile::link(self, self);

    chmod(fileRO.toUtf8().data(), 0400);
    chmod(dirRO.toUtf8().data(), 0500);


// Datei
    //RW
    CHECK(fileCategorize(fileRW) == FileCategory::open_file);
    //RO
    CHECK(fileCategorize(fileRO) == FileCategory::open_file);
    //not exist RW dir
    CHECK(fileCategorize(fileRWNE) == FileCategory::new_file);

    //not exist RO dir /chr
    if ( geteuid() ) {
        CHECK(fileCategorize(fileRONE) == FileCategory::invalid_dir_not_writable);
    }

    //file open with slash: test/
    //CHECK(fileCategorize(fileRW + "/") == FileCategory::invalid_dir_not_exist);

// Dir
    //dir
    CHECK(fileCategorize(dirRW + slash) == FileCategory::dir);
    CHECK(fileCategorize(dirRO + slash) == FileCategory::dir);

    //not exist  /chr/chr /chr/chr/
    CHECK(fileCategorize(dirRWNE + "/") == FileCategory::invalid_dir_not_exist);
    CHECK(fileCategorize(dirRONE + "/") == FileCategory::invalid_dir_not_exist);

// Symlink
    //to file RW
    CHECK(fileCategorize(fileLinkRW) == FileCategory::open_file);

    //to file RO
    CHECK(fileCategorize(fileLinkRO) == FileCategory::open_file);

    //to dir
    //CAPTURE((dirLinkRW + slash).toUtf8().data());
    CHECK(fileCategorize(dirLinkRW + slash) == FileCategory::dir);
    CHECK(fileCategorize(dirLinkRO + slash) == FileCategory::dir);
    CHECK(fileCategorize(dirLinkRWNE + "/") == FileCategory::invalid_dir_not_exist);
    CHECK(fileCategorize(dirLinkRONE + "/") == FileCategory::invalid_dir_not_exist);

    //to not exist file
    CHECK(fileCategorize(fileLinkRWNE) == FileCategory::new_file);
    CHECK(fileCategorize(fileLinkRONE) == FileCategory::new_file); //KAPUT

    //to self
    CHECK(fileCategorize(self) == FileCategory::new_file); // KAPUT
    CHECK(fileCategorize(self + "/") == FileCategory::invalid_dir_not_exist);

// From STDIN
    CHECK(fileCategorize("-") == FileCategory::stdin);

// empty
    CHECK(fileCategorize("") == FileCategory::new_file);

// cleanup
    chmod(dirRO.toUtf8().data(), 0700);
    chmod(fileRO.toUtf8().data(), 0600);
}

TEST_CASE("FileChange") {
    // RO

    // RW

    // change

    // dir delete

}
